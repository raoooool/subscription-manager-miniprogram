generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String          @id @default(cuid())
  openId       String          @unique @map("open_id")
  unionId      String?         @unique @map("union_id")
  phone        String?         @unique
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")
  lastLoginAt  DateTime?       @map("last_login_at")
  subscriptions Subscription[]
  auditLogs     AuditLog[]
}

model Subscription {
  id              String                 @id @default(cuid())
  userId          String                 @map("user_id")
  name            String
  logoUrl         String?                @map("logo_url")
  price           Decimal                @db.Decimal(10, 2)
  currency        String                 @default("CNY")
  cycle           String
  customCycleDays Int?                   @map("custom_cycle_days")
  nextDueDate     DateTime               @map("next_due_date")
  category        String?
  notes           String?
  status          String                 @default("active")
  paymentMethod   String?                @map("payment_method")
  createdAt       DateTime               @default(now()) @map("created_at")
  updatedAt       DateTime               @updatedAt @map("updated_at")
  user            User                   @relation(fields: [userId], references: [id])
  notificationSettings NotificationSetting[]
  notificationLogs     NotificationLog[]
}

model NotificationSetting {
  id            String       @id @default(cuid())
  subscriptionId String      @map("subscription_id")
  advanceDays   Int          @map("advance_days")
  channel       String
  active        Boolean      @default(true)
  lastSentAt    DateTime?    @map("last_sent_at")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  subscription  Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([subscriptionId, channel])
}

model NotificationLog {
  id             String       @id @default(cuid())
  subscriptionId String       @map("subscription_id")
  channel        String
  status         String
  response       Json?
  sentAt         DateTime     @map("sent_at")
  createdAt      DateTime     @default(now()) @map("created_at")
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

model SubscriptionTemplate {
  id            String    @id @default(cuid())
  name          String
  logoUrl       String?   @map("logo_url")
  defaultPrice  Decimal?  @map("default_price") @db.Decimal(10, 2)
  currency      String    @default("CNY")
  cycle         String
  category      String?
  description   String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  entity    String
  entityId  String   @map("entity_id")
  action    String
  before    Json?
  after     Json?
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])

  @@index([entity, entityId])
}
